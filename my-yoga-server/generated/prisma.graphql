import { GraphQLResolveInfo, GraphQLSchema } from 'graphql'
import { IResolvers } from 'graphql-tools/dist/Interfaces'
import { Options } from 'graphql-binding'
import { makePrismaBindingClass, BasePrismaOptions } from 'prisma-binding'

export interface Query {
    pets: <T = Array<Pet | null>>(args: { where?: PetWhereInput | null, orderBy?: PetOrderByInput | null, skip?: Int | null, after?: String | null, before?: String | null, first?: Int | null, last?: Int | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    users: <T = Array<User | null>>(args: { where?: UserWhereInput | null, orderBy?: UserOrderByInput | null, skip?: Int | null, after?: String | null, before?: String | null, first?: Int | null, last?: Int | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    pet: <T = Pet | null>(args: { where: PetWhereUniqueInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> ,
    user: <T = User | null>(args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> ,
    petsConnection: <T = PetConnection>(args: { where?: PetWhereInput | null, orderBy?: PetOrderByInput | null, skip?: Int | null, after?: String | null, before?: String | null, first?: Int | null, last?: Int | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    usersConnection: <T = UserConnection>(args: { where?: UserWhereInput | null, orderBy?: UserOrderByInput | null, skip?: Int | null, after?: String | null, before?: String | null, first?: Int | null, last?: Int | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    node: <T = Node | null>(args: { id: ID_Output }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> 
  }

export interface Mutation {
    createPet: <T = Pet>(args: { data: PetCreateInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    createUser: <T = User>(args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    updatePet: <T = Pet | null>(args: { data: PetUpdateInput, where: PetWhereUniqueInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> ,
    updateUser: <T = User | null>(args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> ,
    deletePet: <T = Pet | null>(args: { where: PetWhereUniqueInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> ,
    deleteUser: <T = User | null>(args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T | null> ,
    upsertPet: <T = Pet>(args: { where: PetWhereUniqueInput, create: PetCreateInput, update: PetUpdateInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    upsertUser: <T = User>(args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    updateManyPets: <T = BatchPayload>(args: { data: PetUpdateInput, where?: PetWhereInput | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    updateManyUsers: <T = BatchPayload>(args: { data: UserUpdateInput, where?: UserWhereInput | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    deleteManyPets: <T = BatchPayload>(args: { where?: PetWhereInput | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> ,
    deleteManyUsers: <T = BatchPayload>(args: { where?: UserWhereInput | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<T> 
  }

export interface Subscription {
    pet: <T = PetSubscriptionPayload | null>(args: { where?: PetSubscriptionWhereInput | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<AsyncIterator<T | null>> ,
    user: <T = UserSubscriptionPayload | null>(args: { where?: UserSubscriptionWhereInput | null }, info?: GraphQLResolveInfo | string, options?: Options) => Promise<AsyncIterator<T | null>> 
  }

export interface Exists {
  Pet: (where?: PetWhereInput) => Promise<boolean>
  User: (where?: UserWhereInput) => Promise<boolean>
}

export interface Prisma {
  query: Query
  mutation: Mutation
  subscription: Subscription
  exists: Exists
  request: <T = any>(query: string, variables?: {[key: string]: any}) => Promise<T>
  delegate(operation: 'query' | 'mutation', fieldName: string, args: {
    [key: string]: any;
}, infoOrQuery?: GraphQLResolveInfo | string, options?: Options): Promise<any>;
delegateSubscription(fieldName: string, args?: {
    [key: string]: any;
}, infoOrQuery?: GraphQLResolveInfo | string, options?: Options): Promise<AsyncIterator<any>>;
getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;
}

export interface BindingConstructor<T> {
  new(options: BasePrismaOptions): T
}
/**
 * Type Defs
*/

const typeDefs = `type AggregatePet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The \`Long\` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPet(data: PetCreateInput!): Pet!
  createUser(data: UserCreateInput!): User!
  updatePet(data: PetUpdateInput!, where: PetWhereUniqueInput!): Pet
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePet(where: PetWhereUniqueInput!): Pet
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPet(where: PetWhereUniqueInput!, create: PetCreateInput!, update: PetUpdateInput!): Pet!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPets(data: PetUpdateInput!, where: PetWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyPets(where: PetWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pet implements Node {
  id: ID!
  name: String
  species: String
  age: Int
  imageUrl: String
  description: String
  adoptionFee: Int
}

"""A connection to a list of items."""
type PetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PetEdge]!
  aggregate: AggregatePet!
}

input PetCreateInput {
  name: String
  species: String
  age: Int
  imageUrl: String
  description: String
  adoptionFee: Int
}

"""An edge in a connection."""
type PetEdge {
  """The item at the end of the edge."""
  node: Pet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  species_ASC
  species_DESC
  age_ASC
  age_DESC
  imageUrl_ASC
  imageUrl_DESC
  description_ASC
  description_DESC
  adoptionFee_ASC
  adoptionFee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PetPreviousValues {
  id: ID!
  name: String
  species: String
  age: Int
  imageUrl: String
  description: String
  adoptionFee: Int
}

type PetSubscriptionPayload {
  mutation: MutationType!
  node: Pet
  updatedFields: [String!]
  previousValues: PetPreviousValues
}

input PetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PetWhereInput
}

input PetUpdateInput {
  name: String
  species: String
  age: Int
  imageUrl: String
  description: String
  adoptionFee: Int
}

input PetWhereInput {
  """Logical AND on all given filters."""
  AND: [PetWhereInput!]

  """Logical OR on all given filters."""
  OR: [PetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  species: String

  """All values that are not equal to given value."""
  species_not: String

  """All values that are contained in given list."""
  species_in: [String!]

  """All values that are not contained in given list."""
  species_not_in: [String!]

  """All values less than the given value."""
  species_lt: String

  """All values less than or equal the given value."""
  species_lte: String

  """All values greater than the given value."""
  species_gt: String

  """All values greater than or equal the given value."""
  species_gte: String

  """All values containing the given string."""
  species_contains: String

  """All values not containing the given string."""
  species_not_contains: String

  """All values starting with the given string."""
  species_starts_with: String

  """All values not starting with the given string."""
  species_not_starts_with: String

  """All values ending with the given string."""
  species_ends_with: String

  """All values not ending with the given string."""
  species_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  imageUrl: String

  """All values that are not equal to given value."""
  imageUrl_not: String

  """All values that are contained in given list."""
  imageUrl_in: [String!]

  """All values that are not contained in given list."""
  imageUrl_not_in: [String!]

  """All values less than the given value."""
  imageUrl_lt: String

  """All values less than or equal the given value."""
  imageUrl_lte: String

  """All values greater than the given value."""
  imageUrl_gt: String

  """All values greater than or equal the given value."""
  imageUrl_gte: String

  """All values containing the given string."""
  imageUrl_contains: String

  """All values not containing the given string."""
  imageUrl_not_contains: String

  """All values starting with the given string."""
  imageUrl_starts_with: String

  """All values not starting with the given string."""
  imageUrl_not_starts_with: String

  """All values ending with the given string."""
  imageUrl_ends_with: String

  """All values not ending with the given string."""
  imageUrl_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  adoptionFee: Int

  """All values that are not equal to given value."""
  adoptionFee_not: Int

  """All values that are contained in given list."""
  adoptionFee_in: [Int!]

  """All values that are not contained in given list."""
  adoptionFee_not_in: [Int!]

  """All values less than the given value."""
  adoptionFee_lt: Int

  """All values less than or equal the given value."""
  adoptionFee_lte: Int

  """All values greater than the given value."""
  adoptionFee_gt: Int

  """All values greater than or equal the given value."""
  adoptionFee_gte: Int
}

input PetWhereUniqueInput {
  id: ID
}

type Query {
  pets(where: PetWhereInput, orderBy: PetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pet]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  pet(where: PetWhereUniqueInput!): Pet
  user(where: UserWhereUniqueInput!): User
  petsConnection(where: PetWhereInput, orderBy: PetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PetConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  pet(where: PetSubscriptionWhereInput): PetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  email: Boolean
  password: String
  address: String
  address2: String
  city: String
  state: String
  zipcode: Int
  rentOrOwn: String
  isAdmin: Boolean
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: Boolean
  password: String
  address: String
  address2: String
  city: String
  state: String
  zipcode: Int
  rentOrOwn: String
  isAdmin: Boolean
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  address_ASC
  address_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zipcode_ASC
  zipcode_DESC
  rentOrOwn_ASC
  rentOrOwn_DESC
  isAdmin_ASC
  isAdmin_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String
  lastName: String
  email: Boolean
  password: String
  address: String
  address2: String
  city: String
  state: String
  zipcode: Int
  rentOrOwn: String
  isAdmin: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: Boolean
  password: String
  address: String
  address2: String
  city: String
  state: String
  zipcode: Int
  rentOrOwn: String
  isAdmin: Boolean
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: Boolean

  """All values that are not equal to given value."""
  email_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zipcode: Int

  """All values that are not equal to given value."""
  zipcode_not: Int

  """All values that are contained in given list."""
  zipcode_in: [Int!]

  """All values that are not contained in given list."""
  zipcode_not_in: [Int!]

  """All values less than the given value."""
  zipcode_lt: Int

  """All values less than or equal the given value."""
  zipcode_lte: Int

  """All values greater than the given value."""
  zipcode_gt: Int

  """All values greater than or equal the given value."""
  zipcode_gte: Int
  rentOrOwn: String

  """All values that are not equal to given value."""
  rentOrOwn_not: String

  """All values that are contained in given list."""
  rentOrOwn_in: [String!]

  """All values that are not contained in given list."""
  rentOrOwn_not_in: [String!]

  """All values less than the given value."""
  rentOrOwn_lt: String

  """All values less than or equal the given value."""
  rentOrOwn_lte: String

  """All values greater than the given value."""
  rentOrOwn_gt: String

  """All values greater than or equal the given value."""
  rentOrOwn_gte: String

  """All values containing the given string."""
  rentOrOwn_contains: String

  """All values not containing the given string."""
  rentOrOwn_not_contains: String

  """All values starting with the given string."""
  rentOrOwn_starts_with: String

  """All values not starting with the given string."""
  rentOrOwn_not_starts_with: String

  """All values ending with the given string."""
  rentOrOwn_ends_with: String

  """All values not ending with the given string."""
  rentOrOwn_not_ends_with: String
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
}

input UserWhereUniqueInput {
  id: ID
}
`

export const Prisma = makePrismaBindingClass<BindingConstructor<Prisma>>({typeDefs})

/**
 * Types
*/

export type MutationType =   'CREATED' |
  'UPDATED' |
  'DELETED'

export type PetOrderByInput =   'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'species_ASC' |
  'species_DESC' |
  'age_ASC' |
  'age_DESC' |
  'imageUrl_ASC' |
  'imageUrl_DESC' |
  'description_ASC' |
  'description_DESC' |
  'adoptionFee_ASC' |
  'adoptionFee_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput =   'id_ASC' |
  'id_DESC' |
  'firstName_ASC' |
  'firstName_DESC' |
  'lastName_ASC' |
  'lastName_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC' |
  'address_ASC' |
  'address_DESC' |
  'address2_ASC' |
  'address2_DESC' |
  'city_ASC' |
  'city_DESC' |
  'state_ASC' |
  'state_DESC' |
  'zipcode_ASC' |
  'zipcode_DESC' |
  'rentOrOwn_ASC' |
  'rentOrOwn_DESC' |
  'isAdmin_ASC' |
  'isAdmin_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export interface PetCreateInput {
  name?: String | null
  species?: String | null
  age?: Int | null
  imageUrl?: String | null
  description?: String | null
  adoptionFee?: Int | null
}

export interface PetSubscriptionWhereInput {
  AND?: PetSubscriptionWhereInput[] | PetSubscriptionWhereInput | null
  OR?: PetSubscriptionWhereInput[] | PetSubscriptionWhereInput | null
  NOT?: PetSubscriptionWhereInput[] | PetSubscriptionWhereInput | null
  mutation_in?: MutationType[] | MutationType | null
  updatedFields_contains?: String | null
  updatedFields_contains_every?: String[] | String | null
  updatedFields_contains_some?: String[] | String | null
  node?: PetWhereInput | null
}

export interface PetUpdateInput {
  name?: String | null
  species?: String | null
  age?: Int | null
  imageUrl?: String | null
  description?: String | null
  adoptionFee?: Int | null
}

export interface PetWhereInput {
  AND?: PetWhereInput[] | PetWhereInput | null
  OR?: PetWhereInput[] | PetWhereInput | null
  NOT?: PetWhereInput[] | PetWhereInput | null
  id?: ID_Input | null
  id_not?: ID_Input | null
  id_in?: ID_Output[] | ID_Output | null
  id_not_in?: ID_Output[] | ID_Output | null
  id_lt?: ID_Input | null
  id_lte?: ID_Input | null
  id_gt?: ID_Input | null
  id_gte?: ID_Input | null
  id_contains?: ID_Input | null
  id_not_contains?: ID_Input | null
  id_starts_with?: ID_Input | null
  id_not_starts_with?: ID_Input | null
  id_ends_with?: ID_Input | null
  id_not_ends_with?: ID_Input | null
  name?: String | null
  name_not?: String | null
  name_in?: String[] | String | null
  name_not_in?: String[] | String | null
  name_lt?: String | null
  name_lte?: String | null
  name_gt?: String | null
  name_gte?: String | null
  name_contains?: String | null
  name_not_contains?: String | null
  name_starts_with?: String | null
  name_not_starts_with?: String | null
  name_ends_with?: String | null
  name_not_ends_with?: String | null
  species?: String | null
  species_not?: String | null
  species_in?: String[] | String | null
  species_not_in?: String[] | String | null
  species_lt?: String | null
  species_lte?: String | null
  species_gt?: String | null
  species_gte?: String | null
  species_contains?: String | null
  species_not_contains?: String | null
  species_starts_with?: String | null
  species_not_starts_with?: String | null
  species_ends_with?: String | null
  species_not_ends_with?: String | null
  age?: Int | null
  age_not?: Int | null
  age_in?: Int[] | Int | null
  age_not_in?: Int[] | Int | null
  age_lt?: Int | null
  age_lte?: Int | null
  age_gt?: Int | null
  age_gte?: Int | null
  imageUrl?: String | null
  imageUrl_not?: String | null
  imageUrl_in?: String[] | String | null
  imageUrl_not_in?: String[] | String | null
  imageUrl_lt?: String | null
  imageUrl_lte?: String | null
  imageUrl_gt?: String | null
  imageUrl_gte?: String | null
  imageUrl_contains?: String | null
  imageUrl_not_contains?: String | null
  imageUrl_starts_with?: String | null
  imageUrl_not_starts_with?: String | null
  imageUrl_ends_with?: String | null
  imageUrl_not_ends_with?: String | null
  description?: String | null
  description_not?: String | null
  description_in?: String[] | String | null
  description_not_in?: String[] | String | null
  description_lt?: String | null
  description_lte?: String | null
  description_gt?: String | null
  description_gte?: String | null
  description_contains?: String | null
  description_not_contains?: String | null
  description_starts_with?: String | null
  description_not_starts_with?: String | null
  description_ends_with?: String | null
  description_not_ends_with?: String | null
  adoptionFee?: Int | null
  adoptionFee_not?: Int | null
  adoptionFee_in?: Int[] | Int | null
  adoptionFee_not_in?: Int[] | Int | null
  adoptionFee_lt?: Int | null
  adoptionFee_lte?: Int | null
  adoptionFee_gt?: Int | null
  adoptionFee_gte?: Int | null
}

export interface PetWhereUniqueInput {
  id?: ID_Input | null
}

export interface UserCreateInput {
  firstName?: String | null
  lastName?: String | null
  email?: Boolean | null
  password?: String | null
  address?: String | null
  address2?: String | null
  city?: String | null
  state?: String | null
  zipcode?: Int | null
  rentOrOwn?: String | null
  isAdmin?: Boolean | null
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput | null
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput | null
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput | null
  mutation_in?: MutationType[] | MutationType | null
  updatedFields_contains?: String | null
  updatedFields_contains_every?: String[] | String | null
  updatedFields_contains_some?: String[] | String | null
  node?: UserWhereInput | null
}

export interface UserUpdateInput {
  firstName?: String | null
  lastName?: String | null
  email?: Boolean | null
  password?: String | null
  address?: String | null
  address2?: String | null
  city?: String | null
  state?: String | null
  zipcode?: Int | null
  rentOrOwn?: String | null
  isAdmin?: Boolean | null
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput | null
  OR?: UserWhereInput[] | UserWhereInput | null
  NOT?: UserWhereInput[] | UserWhereInput | null
  id?: ID_Input | null
  id_not?: ID_Input | null
  id_in?: ID_Output[] | ID_Output | null
  id_not_in?: ID_Output[] | ID_Output | null
  id_lt?: ID_Input | null
  id_lte?: ID_Input | null
  id_gt?: ID_Input | null
  id_gte?: ID_Input | null
  id_contains?: ID_Input | null
  id_not_contains?: ID_Input | null
  id_starts_with?: ID_Input | null
  id_not_starts_with?: ID_Input | null
  id_ends_with?: ID_Input | null
  id_not_ends_with?: ID_Input | null
  firstName?: String | null
  firstName_not?: String | null
  firstName_in?: String[] | String | null
  firstName_not_in?: String[] | String | null
  firstName_lt?: String | null
  firstName_lte?: String | null
  firstName_gt?: String | null
  firstName_gte?: String | null
  firstName_contains?: String | null
  firstName_not_contains?: String | null
  firstName_starts_with?: String | null
  firstName_not_starts_with?: String | null
  firstName_ends_with?: String | null
  firstName_not_ends_with?: String | null
  lastName?: String | null
  lastName_not?: String | null
  lastName_in?: String[] | String | null
  lastName_not_in?: String[] | String | null
  lastName_lt?: String | null
  lastName_lte?: String | null
  lastName_gt?: String | null
  lastName_gte?: String | null
  lastName_contains?: String | null
  lastName_not_contains?: String | null
  lastName_starts_with?: String | null
  lastName_not_starts_with?: String | null
  lastName_ends_with?: String | null
  lastName_not_ends_with?: String | null
  email?: Boolean | null
  email_not?: Boolean | null
  password?: String | null
  password_not?: String | null
  password_in?: String[] | String | null
  password_not_in?: String[] | String | null
  password_lt?: String | null
  password_lte?: String | null
  password_gt?: String | null
  password_gte?: String | null
  password_contains?: String | null
  password_not_contains?: String | null
  password_starts_with?: String | null
  password_not_starts_with?: String | null
  password_ends_with?: String | null
  password_not_ends_with?: String | null
  address?: String | null
  address_not?: String | null
  address_in?: String[] | String | null
  address_not_in?: String[] | String | null
  address_lt?: String | null
  address_lte?: String | null
  address_gt?: String | null
  address_gte?: String | null
  address_contains?: String | null
  address_not_contains?: String | null
  address_starts_with?: String | null
  address_not_starts_with?: String | null
  address_ends_with?: String | null
  address_not_ends_with?: String | null
  address2?: String | null
  address2_not?: String | null
  address2_in?: String[] | String | null
  address2_not_in?: String[] | String | null
  address2_lt?: String | null
  address2_lte?: String | null
  address2_gt?: String | null
  address2_gte?: String | null
  address2_contains?: String | null
  address2_not_contains?: String | null
  address2_starts_with?: String | null
  address2_not_starts_with?: String | null
  address2_ends_with?: String | null
  address2_not_ends_with?: String | null
  city?: String | null
  city_not?: String | null
  city_in?: String[] | String | null
  city_not_in?: String[] | String | null
  city_lt?: String | null
  city_lte?: String | null
  city_gt?: String | null
  city_gte?: String | null
  city_contains?: String | null
  city_not_contains?: String | null
  city_starts_with?: String | null
  city_not_starts_with?: String | null
  city_ends_with?: String | null
  city_not_ends_with?: String | null
  state?: String | null
  state_not?: String | null
  state_in?: String[] | String | null
  state_not_in?: String[] | String | null
  state_lt?: String | null
  state_lte?: String | null
  state_gt?: String | null
  state_gte?: String | null
  state_contains?: String | null
  state_not_contains?: String | null
  state_starts_with?: String | null
  state_not_starts_with?: String | null
  state_ends_with?: String | null
  state_not_ends_with?: String | null
  zipcode?: Int | null
  zipcode_not?: Int | null
  zipcode_in?: Int[] | Int | null
  zipcode_not_in?: Int[] | Int | null
  zipcode_lt?: Int | null
  zipcode_lte?: Int | null
  zipcode_gt?: Int | null
  zipcode_gte?: Int | null
  rentOrOwn?: String | null
  rentOrOwn_not?: String | null
  rentOrOwn_in?: String[] | String | null
  rentOrOwn_not_in?: String[] | String | null
  rentOrOwn_lt?: String | null
  rentOrOwn_lte?: String | null
  rentOrOwn_gt?: String | null
  rentOrOwn_gte?: String | null
  rentOrOwn_contains?: String | null
  rentOrOwn_not_contains?: String | null
  rentOrOwn_starts_with?: String | null
  rentOrOwn_not_starts_with?: String | null
  rentOrOwn_ends_with?: String | null
  rentOrOwn_not_ends_with?: String | null
  isAdmin?: Boolean | null
  isAdmin_not?: Boolean | null
}

export interface UserWhereUniqueInput {
  id?: ID_Input | null
}

/*
 * An object with an ID

 */
export interface Node {
  id: ID_Output
}

export interface AggregatePet {
  count: Int
}

export interface AggregateUser {
  count: Int
}

export interface BatchPayload {
  count: Long
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String | null
  endCursor?: String | null
}

export interface Pet extends Node {
  id: ID_Output
  name?: String | null
  species?: String | null
  age?: Int | null
  imageUrl?: String | null
  description?: String | null
  adoptionFee?: Int | null
}

/*
 * A connection to a list of items.

 */
export interface PetConnection {
  pageInfo: PageInfo
  edges: Array<PetEdge | null>
  aggregate: AggregatePet
}

/*
 * An edge in a connection.

 */
export interface PetEdge {
  node: Pet
  cursor: String
}

export interface PetPreviousValues {
  id: ID_Output
  name?: String | null
  species?: String | null
  age?: Int | null
  imageUrl?: String | null
  description?: String | null
  adoptionFee?: Int | null
}

export interface PetSubscriptionPayload {
  mutation: MutationType
  node?: Pet | null
  updatedFields?: Array<String> | null
  previousValues?: PetPreviousValues | null
}

export interface User extends Node {
  id: ID_Output
  firstName?: String | null
  lastName?: String | null
  email?: Boolean | null
  password?: String | null
  address?: String | null
  address2?: String | null
  city?: String | null
  state?: String | null
  zipcode?: Int | null
  rentOrOwn?: String | null
  isAdmin?: Boolean | null
}

/*
 * A connection to a list of items.

 */
export interface UserConnection {
  pageInfo: PageInfo
  edges: Array<UserEdge | null>
  aggregate: AggregateUser
}

/*
 * An edge in a connection.

 */
export interface UserEdge {
  node: User
  cursor: String
}

export interface UserPreviousValues {
  id: ID_Output
  firstName?: String | null
  lastName?: String | null
  email?: Boolean | null
  password?: String | null
  address?: String | null
  address2?: String | null
  city?: String | null
  state?: String | null
  zipcode?: Int | null
  rentOrOwn?: String | null
  isAdmin?: Boolean | null
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User | null
  updatedFields?: Array<String> | null
  previousValues?: UserPreviousValues | null
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number

/*
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
*/
export type Long = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string